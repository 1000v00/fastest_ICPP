;/*********************************************************************
;*
;* Device     : M16C/60,30,20,10
;* File Name  : ncrt0.a30
;* Abstract   : Startup Program for M16C/60,30,20,10.
;*
;* Copyright (C) 2009 (2010) Renesas Electronics Corporation.
;* and Renesas Solutions Corporation. All rights reserved.
;* and Medified by S.Nankaku 2021-07-30
;*********************************************************************/

;---------------------------------------------------------------------
; include files
;---------------------------------------------------------------------
		.list		OFF
		.include	nc_define.inc
		.include	sect30.inc
		.list		ON

;---------------------------------------------------------------------
; 20210730 S.Nankaku
;---------------------------------------------------------------------
							
PRCR	.equ	000ah					; プロテクトレジスタ
PM0		.equ	0004h					; プロセッサモードレジスタ 0
PM1		.equ	0005h					; プロセッサモードレジスタ 1
CM0		.equ	0006h					; システムクロック制御レジスタ 0
CM1		.equ	0007h					; システムクロック制御レジスタ 1
CM2		.equ	000ch					; システムクロック制御レジスタ 2
PLC0	.equ	001ch					; PLL制御レジスタ0
CSR		.equ	0008h					; チップセレクト制御レジスタ
PM2		.equ	001Eh					; プロセッサモードレジスタ 2
CSE		.equ	001Bh					; チップセレクトウェイト	62P

USE_MEMALLOC	.equ	0 				; 1:メモリ管理関数使用(malloc等)
										; 0:未使用
USE_STDIO	.equ	0					; 1:標準入出力関数使用(printf等)
										; 0:未使用

M62TYPE		.equ	1					; M16C/62を使用
KDVECTOR	.equ	0FF900h				; ver 3.00


;---------------------------------------------------------------------
; BankSelect definition for 4M mode
;---------------------------------------------------------------------
;		.glb		__BankSelect
;__BankSelect	.equ	0BH

;=====================================================================
; Interrupt section start
;---------------------------------------------------------------------
		.insf		start,S,0
		.glb		start
		.section	interrupt
start:
;---------------------------------------------------------------------
; after reset,this program will start
;---------------------------------------------------------------------

	ldc	#istack_top,isp			;set istack pointer
	
	mov.b	#00000011b, PRCR	;プロセッサモードレジスタPM0,1への書き込み許可

	mov.b	#00000000b, PM0		;PM0: single chip mode / P40-43=I/O
	mov.b	#00001000b, PM1		;PM1: Normal/No Wait memory192/15 BLOCK_A=able P37-34=I/O
	mov.b	#00000000b, PM2		;PM2: 
	
	mov.b	#00001000b, CM0		;メインクロック分周なし(CM16,17有効) 6MHz
	mov.b	#00100000b, CM1		;CM16,17=0　分周なし 一旦メインクロック選択
	mov.b	#00000000b, CM2		;
	mov.b	#10010010b, PLC0	;PLL動作　4逓倍 6 * 4 = 24MHz
	mov.b	#00100010b, CM1		;CM16,17=0　分周なし システムクロックとしてPLLクロック選択(24MHz)

	mov.b	#00000000b, PRCR	;プロセッサモードレジスタPM0,1への書き込み禁止

	ldc	#0080h,	flg				;ユーザスタックポインタ
	ldc	#stack_top,	sp			;set stack pointer 
	ldc	#0000h,	flg				;インタラプトスタックポインタ 追加

	ldc	#data_SE_top,sb			;set sb register 
	ldintb	#__VECTOR_ADR__		;set vector base

	fset	i					;割り込み許可

;=====================================================================
; NEAR area initialize.
;---------------------------------------------------------------------
; bss zero clear
;---------------------------------------------------------------------
		N_BZERO		bss_SE_top,bss_SE
		N_BZERO		bss_SO_top,bss_SO
		N_BZERO		bss_NE_top,bss_NE
		N_BZERO		bss_NO_top,bss_NO

;---------------------------------------------------------------------
; initialize data section
;---------------------------------------------------------------------
		N_BCOPY		data_SEI_top,data_SE_top,data_SE
		N_BCOPY		data_SOI_top,data_SO_top,data_SO
		N_BCOPY		data_NEI_top,data_NE_top,data_NE
		N_BCOPY		data_NOI_top,data_NO_top,data_NO

;=====================================================================
; FAR area initialize.
;---------------------------------------------------------------------
; bss zero clear
;---------------------------------------------------------------------
.if __FAR_RAM_FLG__ != 0
		BZERO		bss_FE_top,bss_FE
		BZERO		bss_FO_top,bss_FO
.endif

;---------------------------------------------------------------------
; initialize data section
;---------------------------------------------------------------------
.if __FAR_RAM_FLG__ != 0
		BCOPY		data_FEI_top,data_FE_top,data_FE
		BCOPY		data_FOI_top,data_FO_top,data_FO
.if __STACKSIZE__ != 0
		ldc			#stack_top,sp
.else
		ldc			#istack_top,isp
.endif
		.stk		-40
.endif

;=====================================================================
; heap area initialize
;---------------------------------------------------------------------
.if __HEAPSIZE__ != 0
		.glb		__mnext
		.glb		__msize
		mov.w		#(heap_top&0FFFFH),__mnext
		mov.w		#(heap_top>>16),__mnext+2
		mov.w		#(__HEAPSIZE__&0FFFFH),__msize
		mov.w		#(__HEAPSIZE__>>16),__msize+2
.endif

;=====================================================================
; Initialize standard I/O
;---------------------------------------------------------------------
.if __STANDARD_IO__ == 1
		.glb		__init
		.call		__init,G
		jsr.a		__init
.endif

;=====================================================================
; Call main() function
;---------------------------------------------------------------------
		ldc			#0h,fb				; for debuger

		.glb		_main
		jsr.a		_main

;=====================================================================
; exit() function
;---------------------------------------------------------------------
		.glb		_exit
		.glb		$exit
_exit:									; End program
$exit:
		jmp			_exit
		.einsf
;=====================================================================
; dummy interrupt function
;---------------------------------------------------------------------
		.glb		dummy_int
dummy_int:
		reit

		.end

